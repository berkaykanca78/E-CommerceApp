name: Deploy E-Commerce Application

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore Back-End/E-Commerce/ECommerce.WebAPI/ECommerce.WebAPI.csproj

    - name: Build
      run: dotnet build Back-End/E-Commerce/ECommerce.WebAPI/ECommerce.WebAPI.csproj --no-restore --configuration Release

    - name: Publish
      run: dotnet publish Back-End/E-Commerce/ECommerce.WebAPI/ECommerce.WebAPI.csproj --configuration Release --output ./publish-backend --verbosity normal --no-restore --no-build

    - name: Create web.config for IIS hosting
      run: |
        cd ./publish-backend
        echo '<?xml version="1.0" encoding="utf-8"?>' > web.config
        echo '<configuration>' >> web.config
        echo '  <location path="." inheritInChildApplications="false">' >> web.config
        echo '    <system.webServer>' >> web.config
        echo '      <handlers>' >> web.config
        echo '        <add name="aspNetCore" path="*" verb="*" modules="AspNetCoreModuleV2" resourceType="Unspecified" />' >> web.config
        echo '      </handlers>' >> web.config
        echo '      <aspNetCore processPath="dotnet" arguments=".\ECommerce.WebAPI.dll" stdoutLogEnabled="true" stdoutLogFile=".\logs\stdout" hostingModel="inprocess">' >> web.config
        echo '        <environmentVariables>' >> web.config
        echo '          <environmentVariable name="ASPNETCORE_ENVIRONMENT" value="Release" />' >> web.config
        echo '        </environmentVariables>' >> web.config
        echo '      </aspNetCore>' >> web.config
        echo '    </system.webServer>' >> web.config
        echo '  </location>' >> web.config
        echo '</configuration>' >> web.config

    - name: List published files
      run: |
        echo "Published files:"
        ls -la ./publish-backend/
        echo "Main application DLL:"
        find ./publish-backend -name "ECommerce.WebAPI.dll" -type f
        echo "Configuration files:"
        find ./publish-backend -name "*.json" -type f
        echo "Startup files:"
        find ./publish-backend -name "*.bat" -o -name "web.config" -type f
        echo "Total files count:"
        find ./publish-backend -type f | wc -l

    - name: Replace connection string placeholders
      run: |
        cd ./publish-backend
        echo "Original DB_SERVER value: ${{ secrets.DB_SERVER }}"
        
        # Set environment variables directly from secrets
        export DB_SERVER="${{ secrets.DB_SERVER }}"
        export DB_NAME="${{ secrets.DB_NAME }}"
        export DB_USER="${{ secrets.DB_USER }}"
        export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
        
        echo "DB_SERVER from secrets: '$DB_SERVER'"
        
        echo "Replacing placeholders in appsettings.Release.json..."
        # Use sed for simple replacement
        sed -i "s|\$(DB_SERVER)|$DB_SERVER|g" appsettings.Release.json
        sed -i "s|\$(DB_NAME)|$DB_NAME|g" appsettings.Release.json
        sed -i "s|\$(DB_USER)|$DB_USER|g" appsettings.Release.json
        sed -i "s|\$(DB_PASSWORD)|$DB_PASSWORD|g" appsettings.Release.json
        
        echo "Replacing placeholders in appsettings.json..."
        sed -i "s|\$(DB_SERVER)|$DB_SERVER|g" appsettings.json
        sed -i "s|\$(DB_NAME)|$DB_NAME|g" appsettings.json
        sed -i "s|\$(DB_USER)|$DB_USER|g" appsettings.json
        sed -i "s|\$(DB_PASSWORD)|$DB_PASSWORD|g" appsettings.json
        
        echo "Final connection string check:"
        echo "DB_SERVER value: '$DB_SERVER'"
        echo "Connection string in appsettings.Release.json:"
        grep -A 2 "ConnectionStrings" appsettings.Release.json
        
        echo "Connection strings after replacement:"
        echo "appsettings.Release.json:"
        cat appsettings.Release.json | grep -A 1 "ConnectionStrings"
        echo "appsettings.json:"
        cat appsettings.json | grep -A 1 "ConnectionStrings"
        
        echo "Full connection string for debugging:"
        cat appsettings.Release.json | grep -A 5 "ConnectionStrings"

# Alternative SFTP deployment (more reliable than FTP)
#    - name: Deploy to SFTP
#      uses: wlixcc/SFTP-Deploy-Action@v1.2.4
#      with:
#        username: ${{ secrets.USRNM }}
#        server: ${{ secrets.SRVR }}
#        ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
#        local_path: './publish-backend/*'
#        remote_path: ${{ secrets.BCKNDSRVRDIR }}
#        delete_remote_files: true

    - name: Deploy to FTP (Attempt 1)
      id: deploy-attempt-1
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.SRVR }}
        username: ${{ secrets.USRNM }}
        password: ${{ secrets.PWD }}
        port: ${{ secrets.PRT }}
        local-dir: ./publish-backend/
        server-dir: ${{ secrets.BCKNDSRVRDIR }}
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          **/Thumbs.db
        timeout: 300000
      continue-on-error: true

    - name: Deploy to FTP (Attempt 2)
      if: steps.deploy-attempt-1.outcome == 'failure'
      id: deploy-attempt-2
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.SRVR }}
        username: ${{ secrets.USRNM }}
        password: ${{ secrets.PWD }}
        port: ${{ secrets.PRT }}
        local-dir: ./publish-backend/
        server-dir: ${{ secrets.BCKNDSRVRDIR }}
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          **/Thumbs.db
        timeout: 300000
      continue-on-error: true

    - name: Deploy to FTP (Final Attempt)
      if: steps.deploy-attempt-1.outcome == 'failure' && steps.deploy-attempt-2.outcome == 'failure'
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.SRVR }}
        username: ${{ secrets.USRNM }}
        password: ${{ secrets.PWD }}
        port: ${{ secrets.PRT }}
        local-dir: ./publish-backend/
        server-dir: ${{ secrets.BCKNDSRVRDIR }}
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          **/Thumbs.db
        timeout: 300000

  deploy-frontend:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: Front-End/e-commerce-app/package-lock.json

    - name: Install dependencies
      run: npm ci
      working-directory: Front-End/e-commerce-app

    - name: Build application
      run: npm run build:prod
      working-directory: Front-End/e-commerce-app

    - name: Deploy to FTP (Attempt 1)
      id: deploy-frontend-attempt-1
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.SRVR }}
        username: ${{ secrets.USRNM }}
        password: ${{ secrets.PWD }}
        port: ${{ secrets.PRT }}
        local-dir: ${{ secrets.FRNTLCLDIR }}
        server-dir: ${{ secrets.FRNTSRVRDIR }}
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          **/Thumbs.db
        timeout: 300000
      continue-on-error: true

    - name: Deploy to FTP (Attempt 2)
      if: steps.deploy-frontend-attempt-1.outcome == 'failure'
      id: deploy-frontend-attempt-2
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.SRVR }}
        username: ${{ secrets.USRNM }}
        password: ${{ secrets.PWD }}
        port: ${{ secrets.PRT }}
        local-dir: ${{ secrets.FRNTLCLDIR }}
        server-dir: ${{ secrets.FRNTSRVRDIR }}
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          **/Thumbs.db
        timeout: 300000
      continue-on-error: true

    - name: Deploy to FTP (Final Attempt)
      if: steps.deploy-frontend-attempt-1.outcome == 'failure' && steps.deploy-frontend-attempt-2.outcome == 'failure'
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.SRVR }}
        username: ${{ secrets.USRNM }}
        password: ${{ secrets.PWD }}
        port: ${{ secrets.PRT }}
        local-dir: ${{ secrets.FRNTLCLDIR }}
        server-dir: ${{ secrets.FRNTSRVRDIR }}
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          **/Thumbs.db
        timeout: 300000 